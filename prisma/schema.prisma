// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum DocumentStatus {
  PENDING
  SENT
}

model Employee {
  id        Int      @id @default(autoincrement())
  name      String
  document  String   @unique
  hiredAt   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  documents              Document[]
  employeeDocumentTypes  EmployeeDocumentType[]

  @@map("employees")
}

model DocumentType {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  documents              Document[]
  employeeDocumentTypes  EmployeeDocumentType[]

  @@map("document_types")
}

model Document {
  id             Int            @id @default(autoincrement())
  name           String
  status         DocumentStatus @default(SENT)
  employeeId     Int
  documentTypeId Int
  sentAt         DateTime       @default(now())
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  employee     Employee     @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  documentType DocumentType @relation(fields: [documentTypeId], references: [id], onDelete: Cascade)

  @@unique([employeeId, documentTypeId])
  @@map("documents")
}

model EmployeeDocumentType {
  employeeId     Int
  documentTypeId Int
  createdAt      DateTime @default(now())

  employee     Employee     @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  documentType DocumentType @relation(fields: [documentTypeId], references: [id], onDelete: Cascade)

  @@id([employeeId, documentTypeId])
  @@map("employee_document_types")
}